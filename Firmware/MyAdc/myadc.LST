C51 COMPILER V7.07   MYADC                                                                 05/17/2020 16:55:49 PAGE 1   


C51 COMPILER V7.07, COMPILATION OF MODULE MYADC
OBJECT MODULE PLACED IN myadc.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE myadc.c BROWSE DEBUG OBJECTEXTEND TABS(3)

stmt level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          
   3          #include "fx2.h"
   4          #include "fx2regs.h"
   5          #include "syncdly.h"            // SYNCDELAY macro
   6          
   7          extern BOOL GotSUD;             // Received setup data flag
   8          extern BOOL Sleep;
   9          extern BOOL Rwuen;
  10          extern BOOL Selfpwr;
  11          
  12          BYTE Configuration;             // Current configuration
  13          BYTE AlternateSetting;          // Alternate settings
  14          
  15          #define VENDOR_DEVICE_TYPE 0xC0
  16          #define VENDOR_DEVICE_PARAM 0xC1
  17          
  18          #define DEVICE_TYPE 0x02
  19          #define DATA_PORT_NO 52002
  20          
  21          //-----------------------------------------------------------------------------
  22          // Task Dispatcher hooks
  23          //   The following hooks are called by the task dispatcher.
  24          //-----------------------------------------------------------------------------
  25          
  26          void GpifInit( void );
  27          
  28          void TD_Init(void)             // Called once at startup
  29          {
  30   1         CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1) ;  // 48 MHz CPU clock
  31   1      
  32   1         REVCTL = 0x03; // REVCTL.0 and REVCTL.1 set to 1
  33   1         SYNCDELAY;
  34   1      
  35   1         EP2CFG = 0xE8; // IN, Bulk, 1024, Quad
  36   1      
  37   1         GpifInit();
  38   1      
  39   1         // start GPIF FIFO Read
  40   1         FIFORESET = 0x80; // activate NAK-ALL to avoid race conditions
  41   1         SYNCDELAY;
  42   1      
  43   1         EP2FIFOCFG = 0x00; //switching to manual mode
  44   1         SYNCDELAY;
  45   1         FIFORESET = 0x02; // Reset FIFO 2
  46   1         SYNCDELAY;
  47   1         EP2FIFOCFG = 0x08; //switching to auto mode
  48   1         SYNCDELAY;
  49   1      
  50   1         FIFORESET = 0x00; //Release NAKALL
  51   1         SYNCDELAY;
  52   1      
  53   1         EP2GPIFFLGSEL = 2; // GPIF FIFOFlag is full
  54   1         SYNCDELAY;
  55   1      
C51 COMPILER V7.07   MYADC                                                                 05/17/2020 16:55:49 PAGE 2   

  56   1         GPIFTCB0 = 1;
  57   1         SYNCDELAY;
  58   1         // trigger FIFO read transactions, using SFR
  59   1         GPIFTRIG = bmBIT2 | 0; // R/W=1, EP[1:0]=FIFO_EpNum
  60   1      }
  61          
  62          void TD_Poll(void)              // Called repeatedly while the device is idle
  63          {
  64   1      }
  65          
  66          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
  67          {
  68   1         return(TRUE);
  69   1      }
  70          
  71          BOOL TD_Resume(void)          // Called after the device resumes
  72          {
  73   1         return(TRUE);
  74   1      }
  75          
  76          //-----------------------------------------------------------------------------
  77          // Device Request hooks
  78          //   The following hooks are called by the end point 0 device request parser.
  79          //-----------------------------------------------------------------------------
  80          
  81          BOOL DR_GetDescriptor(void)
  82          {
  83   1         return(TRUE);
  84   1      }
  85          
  86          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
  87          {
  88   1         Configuration = SETUPDAT[2];
  89   1         return(TRUE);            // Handled by user code
  90   1      }
  91          
  92          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
  93          {
  94   1         EP0BUF[0] = Configuration;
  95   1         EP0BCH = 0;
  96   1         EP0BCL = 1;
  97   1         return(TRUE);            // Handled by user code
  98   1      }
  99          
 100          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 101          {
 102   1         AlternateSetting = SETUPDAT[2];
 103   1         return(TRUE);            // Handled by user code
 104   1      }
 105          
 106          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 107          {
 108   1         EP0BUF[0] = AlternateSetting;
 109   1         EP0BCH = 0;
 110   1         EP0BCL = 1;
 111   1         return(TRUE);            // Handled by user code
 112   1      }
 113          
 114          BOOL DR_GetStatus(void)
 115          {
 116   1         return(TRUE);
 117   1      }
C51 COMPILER V7.07   MYADC                                                                 05/17/2020 16:55:49 PAGE 3   

 118          
 119          BOOL DR_ClearFeature(void)
 120          {
 121   1         return(TRUE);
 122   1      }
 123          
 124          BOOL DR_SetFeature(void)
 125          {
 126   1         return(TRUE);
 127   1      }
 128          
 129          BOOL DR_VendorCmnd(void)
 130          {
 131   1         switch (SETUPDAT[1])
 132   1         {
 133   2            case VENDOR_DEVICE_TYPE:
 134   2               EP0BUF[0] = DEVICE_TYPE;
 135   2               EP0BCH = 0;
 136   2               EP0BCL = 1;
 137   2               break;
 138   2      
 139   2            case VENDOR_DEVICE_PARAM:
 140   2               EP0BUF[0] = DATA_PORT_NO & 0xFF;
 141   2               EP0BUF[1] = (DATA_PORT_NO >> 8) & 0xFF;
 142   2               EP0BCH = 0;
 143   2               EP0BCL = 2;
 144   2               break;
 145   2      
 146   2            default:
 147   2               return(TRUE);
 148   2         }
 149   1      
 150   1         return(FALSE);
 151   1      }
 152          
 153          //-----------------------------------------------------------------------------
 154          // USB Interrupt Handlers
 155          //   The following functions are called by the USB interrupt jump table.
 156          //-----------------------------------------------------------------------------
 157          
 158          // Setup Data Available Interrupt Handler
 159          void ISR_Sudav(void) interrupt 0
 160          {
 161   1         GotSUD = TRUE;            // Set flag
 162   1         EZUSB_IRQ_CLEAR();
 163   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 164   1      }
 165          
 166          // Setup Token Interrupt Handler
 167          void ISR_Sutok(void) interrupt 0
 168          {
 169   1         EZUSB_IRQ_CLEAR();
 170   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 171   1      }
 172          
 173          void ISR_Sof(void) interrupt 0
 174          {
 175   1         EZUSB_IRQ_CLEAR();
 176   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 177   1      }
 178          
 179          void ISR_Ures(void) interrupt 0
C51 COMPILER V7.07   MYADC                                                                 05/17/2020 16:55:49 PAGE 4   

 180          {
 181   1         // whenever we get a USB reset, we should revert to full speed mode
 182   1         pConfigDscr = pFullSpeedConfigDscr;
 183   1         ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 184   1         pOtherConfigDscr = pHighSpeedConfigDscr;
 185   1         ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 186   1      
 187   1         EZUSB_IRQ_CLEAR();
 188   1         USBIRQ = bmURES;         // Clear URES IRQ
 189   1      }
 190          
 191          void ISR_Susp(void) interrupt 0
 192          {
 193   1         Sleep = TRUE;
 194   1         EZUSB_IRQ_CLEAR();
 195   1         USBIRQ = bmSUSP;
 196   1      }
 197          
 198          void ISR_Highspeed(void) interrupt 0
 199          {
 200   1         if (EZUSB_HIGHSPEED())
 201   1         {
 202   2            pConfigDscr = pHighSpeedConfigDscr;
 203   2            ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 204   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 205   2            ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 206   2         }
 207   1      
 208   1         EZUSB_IRQ_CLEAR();
 209   1         USBIRQ = bmHSGRANT;
 210   1      }
 211          void ISR_Ep0ack(void) interrupt 0
 212          {
 213   1      }
 214          void ISR_Stub(void) interrupt 0
 215          {
 216   1      }
 217          void ISR_Ep0in(void) interrupt 0
 218          {
 219   1      }
 220          void ISR_Ep0out(void) interrupt 0
 221          {
 222   1      }
 223          void ISR_Ep1in(void) interrupt 0
 224          {
 225   1      }
 226          void ISR_Ep1out(void) interrupt 0
 227          {
 228   1      }
 229          void ISR_Ep2inout(void) interrupt 0
 230          {
 231   1      }
 232          void ISR_Ep4inout(void) interrupt 0
 233          {
 234   1      }
 235          void ISR_Ep6inout(void) interrupt 0
 236          {
 237   1      }
 238          void ISR_Ep8inout(void) interrupt 0
 239          {
 240   1      }
 241          void ISR_Ibn(void) interrupt 0
C51 COMPILER V7.07   MYADC                                                                 05/17/2020 16:55:49 PAGE 5   

 242          {
 243   1      }
 244          void ISR_Ep0pingnak(void) interrupt 0
 245          {
 246   1      }
 247          void ISR_Ep1pingnak(void) interrupt 0
 248          {
 249   1      }
 250          void ISR_Ep2pingnak(void) interrupt 0
 251          {
 252   1      }
 253          void ISR_Ep4pingnak(void) interrupt 0
 254          {
 255   1      }
 256          void ISR_Ep6pingnak(void) interrupt 0
 257          {
 258   1      }
 259          void ISR_Ep8pingnak(void) interrupt 0
 260          {
 261   1      }
 262          void ISR_Errorlimit(void) interrupt 0
 263          {
 264   1      }
 265          void ISR_Ep2piderror(void) interrupt 0
 266          {
 267   1      }
 268          void ISR_Ep4piderror(void) interrupt 0
 269          {
 270   1      }
 271          void ISR_Ep6piderror(void) interrupt 0
 272          {
 273   1      }
 274          void ISR_Ep8piderror(void) interrupt 0
 275          {
 276   1      }
 277          void ISR_Ep2pflag(void) interrupt 0
 278          {
 279   1      }
 280          void ISR_Ep4pflag(void) interrupt 0
 281          {
 282   1      }
 283          void ISR_Ep6pflag(void) interrupt 0
 284          {
 285   1      }
 286          void ISR_Ep8pflag(void) interrupt 0
 287          {
 288   1      }
 289          void ISR_Ep2eflag(void) interrupt 0
 290          {
 291   1      }
 292          void ISR_Ep4eflag(void) interrupt 0
 293          {
 294   1      }
 295          void ISR_Ep6eflag(void) interrupt 0
 296          {
 297   1      }
 298          void ISR_Ep8eflag(void) interrupt 0
 299          {
 300   1      }
 301          void ISR_Ep2fflag(void) interrupt 0
 302          {
 303   1      }
C51 COMPILER V7.07   MYADC                                                                 05/17/2020 16:55:49 PAGE 6   

 304          void ISR_Ep4fflag(void) interrupt 0
 305          {
 306   1      }
 307          void ISR_Ep6fflag(void) interrupt 0
 308          {
 309   1      }
 310          void ISR_Ep8fflag(void) interrupt 0
 311          {
 312   1      }
 313          void ISR_GpifComplete(void) interrupt 0
 314          {
 315   1      }
 316          void ISR_GpifWaveform(void) interrupt 0
 317          {
 318   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    455    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
